//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/code/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GA.BunnyHole.Generated
{
    public partial class @Inputs: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Inputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Basket"",
            ""id"": ""c6b473a3-a890-4e4c-9df3-8401a04f882f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4ecc9f29-8df5-4c70-be28-24b694713bab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""eb8af6df-0dbd-48b0-8809-399fc682f894"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""388fbdc3-5305-403d-8fa5-34fb95ddc102"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e4c2a473-addb-4427-8dea-39e517a56f29"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Systems"",
            ""id"": ""1b91656c-ba62-40c3-9577-779654f6ece2"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""ce1be035-6a43-4b9b-bab2-35458f5f5f2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8938ec45-5a06-49fb-a43a-27cc85472394"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Basket
            m_Basket = asset.FindActionMap("Basket", throwIfNotFound: true);
            m_Basket_Move = m_Basket.FindAction("Move", throwIfNotFound: true);
            // Systems
            m_Systems = asset.FindActionMap("Systems", throwIfNotFound: true);
            m_Systems_Pause = m_Systems.FindAction("Pause", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Basket
        private readonly InputActionMap m_Basket;
        private List<IBasketActions> m_BasketActionsCallbackInterfaces = new List<IBasketActions>();
        private readonly InputAction m_Basket_Move;
        public struct BasketActions
        {
            private @Inputs m_Wrapper;
            public BasketActions(@Inputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Basket_Move;
            public InputActionMap Get() { return m_Wrapper.m_Basket; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BasketActions set) { return set.Get(); }
            public void AddCallbacks(IBasketActions instance)
            {
                if (instance == null || m_Wrapper.m_BasketActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BasketActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }

            private void UnregisterCallbacks(IBasketActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
            }

            public void RemoveCallbacks(IBasketActions instance)
            {
                if (m_Wrapper.m_BasketActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBasketActions instance)
            {
                foreach (var item in m_Wrapper.m_BasketActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BasketActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BasketActions @Basket => new BasketActions(this);

        // Systems
        private readonly InputActionMap m_Systems;
        private List<ISystemsActions> m_SystemsActionsCallbackInterfaces = new List<ISystemsActions>();
        private readonly InputAction m_Systems_Pause;
        public struct SystemsActions
        {
            private @Inputs m_Wrapper;
            public SystemsActions(@Inputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pause => m_Wrapper.m_Systems_Pause;
            public InputActionMap Get() { return m_Wrapper.m_Systems; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SystemsActions set) { return set.Get(); }
            public void AddCallbacks(ISystemsActions instance)
            {
                if (instance == null || m_Wrapper.m_SystemsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SystemsActionsCallbackInterfaces.Add(instance);
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }

            private void UnregisterCallbacks(ISystemsActions instance)
            {
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
            }

            public void RemoveCallbacks(ISystemsActions instance)
            {
                if (m_Wrapper.m_SystemsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISystemsActions instance)
            {
                foreach (var item in m_Wrapper.m_SystemsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SystemsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SystemsActions @Systems => new SystemsActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        public interface IBasketActions
        {
            void OnMove(InputAction.CallbackContext context);
        }
        public interface ISystemsActions
        {
            void OnPause(InputAction.CallbackContext context);
        }
    }
}
